# This file was generated at runtime on 2019-03-08 02:14:30.509500
from z3 import *

class Z3RuntimeCnfFile():
	def __init__(self):
		self.finalFormula = ""
		self.satisfiability = ""
		self.modelForViolation = ""

	def execute(self):
		B3 = Real('B3')
		A4 = Real('A4')
		D2 = Real('D2')
		B4 = Real('B4')
		X5 = Real('X5')
		B0 = Real('B0')
		C4 = Real('C4')
		D3 = Real('D3')
		X4 = Real('X4')
		D4 = Real('D4')
		Y3 = Real('Y3')
		A1 = Real('A1')
		C0 = Real('C0')
		Y2 = Real('Y2')
		Y1 = Real('Y1')
		Y4 = Real('Y4')
		D1 = Real('D1')
		V_TYPE_ID0 = Real('V_TYPE_ID0')
		Z0 = Real('Z0')
		GG2 = Real('GG2')
		L0 = Real('L0')
		U0 = Real('U0')
		K0 = Real('K0')
		J0 = Real('J0')
		X2 = Real('X2')
		GG0 = Real('GG0')
		B2 = Real('B2')
		D0 = Real('D0')
		C1 = Real('C1')
		C3 = Real('C3')
		A0 = Real('A0')
		ID1 = Real('ID1')
		X3 = Real('X3')
		X0 = Real('X0')
		A3 = Real('A3')
		B1 = Real('B1')
		X6 = Real('X6')
		X1 = Real('X1')
		GG1 = Real('GG1')
		Y0 = Real('Y0')
		A2 = Real('A2')
		C2 = Real('C2')

		s = Solver()
		s.add(True)
		s.add(Implies( True, And( And( And( And( C0 + D0 < 0, A0 > 0 ), B0 > 0 ), C0 > 0 ), D0 > 0 ) ))
		s.add(True)
		s.add(Implies( True, And( ( Y1 ) == ( A0 ), B0 == 50 ) ))
		s.add(True)
		s.add(Implies( True, ( ID1 ) == ( B0 ) ))
		s.add(True)
		s.add(Implies( True, ( ID1 ) == ( X1 ) ))
		s.add(True)
		s.add(Implies( True, ( A1 ) == ( X1 + 5 ) ))
		s.add(True)
		s.add(Implies( True, ( B1 ) == ( X1 - 5 ) ))
		s.add(True)
		s.add(Implies( True, ( C1 ) == ( Y1 * ( Z0 - 2 ) ) ))
		s.add(X1 > Y1)
		s.add(Implies( X1 > Y1, ( X2 ) == ( X1 - 50 ) ))
		s.add(X1 > Y1)
		s.add(Implies( X1 > Y1, ( X3 ) == ( X2 * 9 ) ))
		s.add(X1 > Y1)
		s.add(Implies( X1 > Y1, A3 == A2 ))
		s.add(X1 > Y1)
		s.add(Implies( X1 > Y1, B3 == B2 ))
		s.add(X1 > Y1)
		s.add(Implies( X1 > Y1, D3 == D2 ))
		s.add(X1 > Y1)
		s.add(Implies( X1 > Y1, C3 == C2 ))
		s.add(X1 > Y1)
		s.add(Implies( X1 > Y1, X4 == X3 ))
		s.add(X1 > Y1)
		s.add(Implies( X1 > Y1, Y2 == Y1 ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), ( Y3 ) == ( X1 - 5 ) ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), And( ( X5 ) == ( A1 ), And( A1 == X1 + 3, B1 == X1 - 3 ) ) ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), And( ( Y4 ) == ( B1 ), And( A1 == X1 + 3, B1 == X1 - 3 ) ) ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), A3 == A1 ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), B3 == B1 ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), D3 == D1 ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), C3 == C1 ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), X4 == X5 ))
		s.add(And( Not( X1 > Y1 ), X1 < Y1 ))
		s.add(Implies( And( Not( X1 > Y1 ), X1 < Y1 ), Y2 == Y4 ))
		s.add(And( Not( X1 > Y1 ), Not( X1 < Y1 ) ))
		s.add(Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), ( X6 ) == ( X1 + 40 ) ))
		s.add(And( Not( X1 > Y1 ), Not( X1 < Y1 ) ))
		s.add(Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), Or( And( And( ( A4 ) == ( A1 * ( X6 - 9 * ( Y1 - 3 ) ) ), ( B4 ) == ( Y1 - 9 ) ), And( A1 > 10, B1 <= ( X6 + Y1 ) - 50 ) ), And( Not( And( A1 > 10, B1 <= ( X6 + Y1 ) - 50 ) ), And( ( A4 ) == ( A1 ), ( B4 ) == ( B1 ) ) ) ) ))
		s.add(And( Not( X1 > Y1 ), Not( X1 < Y1 ) ))
		s.add(Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), A3 == A4 ))
		s.add(And( Not( X1 > Y1 ), Not( X1 < Y1 ) ))
		s.add(Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), B3 == B4 ))
		s.add(And( Not( X1 > Y1 ), Not( X1 < Y1 ) ))
		s.add(Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), D3 == D4 ))
		s.add(And( Not( X1 > Y1 ), Not( X1 < Y1 ) ))
		s.add(Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), C3 == C4 ))
		s.add(And( Not( X1 > Y1 ), Not( X1 < Y1 ) ))
		s.add(Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), X4 == X6 ))
		s.add(And( Not( X1 > Y1 ), Not( X1 < Y1 ) ))
		s.add(Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), Y2 == Y1 ))
		s.add(Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ))
		s.add(Implies( Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ), And( ( GG1 ) == ( A3 ), Or( And( A3 + C3 < 55, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ), Z0 >= 60 ) ) ))
		s.add(Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ))
		s.add(Implies( Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ), GG2 == GG1 ))
		s.add(Not( Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ) ))
		s.add(Implies( Not( Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ) ), GG2 == GG0 ))
		s.add( Not( And( Implies( True, And( And( And( And( C0 + D0 < 0, A0 > 0 ), B0 > 0 ), C0 > 0 ), D0 > 0 ) ), And( Implies( True, And( ( Y1 ) == ( A0 ), B0 == 50 ) ), And( Implies( True, ( ID1 ) == ( B0 ) ), And( Implies( True, ( ID1 ) == ( X1 ) ), And( Implies( True, ( A1 ) == ( X1 + 5 ) ), And( Implies( True, ( B1 ) == ( X1 - 5 ) ), And( Implies( True, ( C1 ) == ( Y1 * ( Z0 - 2 ) ) ), And( Implies( X1 > Y1, ( X2 ) == ( X1 - 50 ) ), And( Implies( X1 > Y1, ( X3 ) == ( X2 * 9 ) ), And( Implies( X1 > Y1, A3 == A2 ), And( Implies( X1 > Y1, B3 == B2 ), And( Implies( X1 > Y1, D3 == D2 ), And( Implies( X1 > Y1, C3 == C2 ), And( Implies( X1 > Y1, X4 == X3 ), And( Implies( X1 > Y1, Y2 == Y1 ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), ( Y3 ) == ( X1 - 5 ) ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), And( ( X5 ) == ( A1 ), And( A1 == X1 + 3, B1 == X1 - 3 ) ) ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), And( ( Y4 ) == ( B1 ), And( A1 == X1 + 3, B1 == X1 - 3 ) ) ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), A3 == A1 ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), B3 == B1 ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), D3 == D1 ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), C3 == C1 ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), X4 == X5 ), And( Implies( And( Not( X1 > Y1 ), X1 < Y1 ), Y2 == Y4 ), And( Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), ( X6 ) == ( X1 + 40 ) ), And( Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), Or( And( And( ( A4 ) == ( A1 * ( X6 - 9 * ( Y1 - 3 ) ) ), ( B4 ) == ( Y1 - 9 ) ), And( A1 > 10, B1 <= ( X6 + Y1 ) - 50 ) ), And( Not( And( A1 > 10, B1 <= ( X6 + Y1 ) - 50 ) ), And( ( A4 ) == ( A1 ), ( B4 ) == ( B1 ) ) ) ) ), And( Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), A3 == A4 ), And( Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), B3 == B4 ), And( Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), D3 == D4 ), And( Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), C3 == C4 ), And( Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), X4 == X6 ), And( Implies( And( Not( X1 > Y1 ), Not( X1 < Y1 ) ), Y2 == Y1 ), And( Implies( Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ), And( ( GG1 ) == ( A3 ), Or( And( A3 + C3 < 55, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ), Z0 >= 60 ) ) ), And( Implies( Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ), GG2 == GG1 ), And( Implies( Not( Or( Or( K0 + L0 < 55, And( J0 >= 66, And( ( A3 + B3 ) > ( ( X4 + 10 ) ), ( A3 + B3 ) < ( Y2 + 20 ) ) ) ), U0 >= 60 ) ), GG2 == GG0 ), And( And( And( C3 + D3 < 0, A3 > 0 ), B3 > 0 ), D3 > 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )

		print()
		print("%%%%%%%%%% Aggregate Formula %%%%%%%%%%\n", s)
		self.finalFormula = str(s)
		print()
		print("%%%%%%%%%% Satisfiability %%%%%%%%%%")

		self.satisfiability = str(s.check())
		if self.satisfiability == "sat":
			print()
			print("-------->> Violation Occurred...")
			self.satisfiability = "Unsatisfiable"
			print()
			print("%%%%%%%%%% An Instance for which Violation Occurred %%%%%%%%%%\n", s.model())
			self.modelForViolation = str(s.model())
		elif self.satisfiability == "unsat":
			print()
			print("-------->> NO Violation Detected so far...")
			self.satisfiability = "Satisfiable"
			print()
		print()
